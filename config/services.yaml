# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
      autowire: true      # Automatically injects dependencies in your services.
      autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
      public: false       # Allows optimizing the container by removing unused services; this also means
      # fetching services directly from the container via $container->get() won't work.
      # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
      resource: '../src/*'
      exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\UI\Controller\:
      resource: '../src/UI/Controller'
      tags: ['controller.service_arguments']

    twig.extension.text:
      class: Twig_Extensions_Extension_Text
      tags:
        - { name: twig.extension }

    queryBus:
      class: App\Infrastructure\Application\QueryBus\QueryBus

    # Command bus handler
    travel.publish_handler:
      class: App\Application\UseCases\Travel\PublishTravelService
      arguments: ['@doctrine.travel.repository','@doctrine.user.repository']
      tags:
        - { name: tactician.handler, command: App\Application\Command\Travel\PublishTravelCommand}

    travel.update_handler:
      class: App\Application\UseCases\Travel\UpdateTravelService
      arguments: ['@doctrine.travel.repository']
      tags:
        - { name: tactician.handler, command: App\Application\Command\Travel\UpdateTravelCommand}

    travel.add_handler:
      class: App\Application\UseCases\Travel\AddTravelService
      arguments: ['@doctrine.travel.repository','@doctrine.user.repository','@elasticsearch.travel.repository']
      tags:
        - { name: tactician.handler, command: App\Application\Command\Travel\AddTravelCommand}

    location.add_handler:
      class: App\Application\UseCases\Location\AddLocationService
      arguments:  ['@doctrine.travel.repository','@doctrine.user.repository', '@doctrine.mark.repository', '@doctrine.location.repository' ]
      tags:
        - { name: tactician.handler, command: App\Application\Command\Location\AddLocationCommand}

    location.delete_handler:
      class: App\Application\UseCases\Location\DeleteLocationService
      arguments:  ['@doctrine.user.repository', '@doctrine.location.repository' ]
      tags:
        - { name: tactician.handler, command: App\Application\Command\Location\DeleteLocationCommand}

    # Query Bus
    trave.get_best_travels:
      class: App\Application\UseCases\Travel\GetBestTravelsOrderedByService
      arguments: ['@elasticsearch.travel.read_model.repository']
      tags: [messenger.message_handler]

    travel.show_handler:
      class: App\Application\UseCases\Travel\ShowTravelService
      arguments: ['@doctrine.travel.repository']
      tags: [messenger.message_handler]

    travel.gey_my_travels:
      class: App\Application\UseCases\Travel\GetAllMyTravelsService
      arguments: ['@elasticsearch.travel.read_model.repository']
      tags: [messenger.message_handler]

    location.get_by_travel_handler:
      class: App\Application\UseCases\Location\GetLocationsByTravelService
      arguments:  ['@doctrine.travel.repository' ]
      tags: [messenger.message_handler]


    # Tactician middleware Store domain events
    App\Application\Middleware\DomainEventsMiddleware:
      arguments: ['@doctrine.travel_event.repository']

    tactician.middleware.domainEventStore: '@App\Infrastructure\Middleware\DomainEventsMiddleware'

    # Repository travel
    App\Infrastructure\TravelBundle\Repository\DoctrineTravelRepository:
      arguments: ['@doctrine']

    doctrine.travel.repository: '@App\Infrastructure\TravelBundle\Repository\DoctrineTravelRepository'

    elasticsearch.travel.read_model.repository: '@App\Infrastructure\TravelBundle\Repository\ElasticSearchReadModelRepository'

    # Repository User
    App\Infrastructure\UserBundle\Repository\DoctrineUserRepository:
      arguments: ['@doctrine']

    doctrine.user.repository: '@App\Infrastructure\UserBundle\Repository\DoctrineUserRepository'

    # Repository Location
    App\Infrastructure\LocationBundle\Repository\DoctrineLocationRepository:
      arguments: ['@doctrine']

    doctrine.location.repository: '@App\Infrastructure\LocationBundle\Repository\DoctrineLocationRepository'

    # Repository Mark
    App\Infrastructure\MarkBundle\Repository\DoctrineMarkRepository:
      arguments: ['@doctrine']

    doctrine.mark.repository: '@App\Infrastructure\MarkBundle\Repository\DoctrineMarkRepository'


    # Event store repository
    App\Infrastructure\EventBundle\Repository\DoctrineEventStore:
      arguments: ['@doctrine','@jms_serializer']

    doctrine.travel_event.repository: '@App\Infrastructure\EventBundle\Repository\DoctrineEventStore'

    # Tactician middleware Store elasticsearch
    App\Application\Middleware\ElasticSearchMiddleware:
      arguments: ['@elasticsearch.travel.repository']

    tactician.middleware.elasticSearchTravel: '@App\Infrastructure\Middleware\ElasticSearchMiddleware'

    # Elasticsearch Repository
    elasticsearch.travel.repository: '@App\Infrastructure\TravelBundle\Repository\ElasticSearchTravelRepository'

    # Listener postpersist
    elasticsearch.listener:
      class: App\Infrastructure\Application\ElasticSearch\Notification\ElasticSearchListener
      tags:
        - { name: doctrine.event_listener, event: postPersist }
        - { name: doctrine.event_listener, event: postUpdate }
