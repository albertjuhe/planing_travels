<?php

namespace App\Tests\Application\UseCases\Travel;

use App\Application\Command\Travel\UpdateTravelCommand;
use App\Application\UseCases\Travel\UpdateTravelService;
use App\Domain\Travel\Exceptions\InvalidTravelUser;
use App\Domain\User\Model\User;
use App\Tests\Infrastructure\TravelBundle\Repository\InMemoryTravelRepository;

class UpdateTravelServiceTest extends TravelService
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testUpdateTravel(): void
    {
        $travel = $this->travelRepository->findTravelBySlug(InMemoryTravelRepository::TRAVEL_1);
        $newTitle = uniqid();

        $travel->setTitle($newTitle);

        $updateTravelService = new UpdateTravelService($this->travelRepository);
        $updateTravelCommand = new UpdateTravelCommand($travel, $travel->getUser());
        $travel = $this->travelRepository->findTravelBySlug(InMemoryTravelRepository::TRAVEL_1);
        $updateTravelService->handle($updateTravelCommand);
        $this->assertEquals($travel->getTitle(), $newTitle);
    }

    public function testDoesntUpdateTravelIsNotTheOwnerTravel(): void
    {
        $this->expectException(InvalidTravelUser::class);
        $travel = $this->travelRepository->findTravelBySlug(InMemoryTravelRepository::TRAVEL_1);
        $newTitle = uniqid();
        $user2 = User::byId(2);

        $travel->setTitle($newTitle);

        $updateTravelService = new UpdateTravelService($this->travelRepository);
        $updateTravelCommand = new UpdateTravelCommand($travel, $user2);
        $travel = $this->travelRepository->findTravelBySlug(InMemoryTravelRepository::TRAVEL_1);
        $updateTravelService->handle($updateTravelCommand);
        $this->assertEquals($travel->getTitle(), $newTitle);
    }
}
