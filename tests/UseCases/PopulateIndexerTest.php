<?php

namespace App\Tests\UseCases;

use App\Application\UseCases\Travel\PopulateIndexer;
use App\Domain\Travel\Model\Travel;
use App\Infrastructure\TravelBundle\Repository\DoctrineTravelRepository;
use App\Infrastructure\TravelBundle\Repository\ElasticSearchTravelRepository;
use PHPUnit\Framework\TestCase;

class PopulateIndexerTest extends TestCase
{
    private $travelRepository;
    private $indexerRepository;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testExecutePopulateIndexer(): void
    {
        $this->travelRepository = $this->createMock(DoctrineTravelRepository::class);
        $this->indexerRepository = $this->createMock(ElasticSearchTravelRepository::class);

        $travel1 = $this->createMock(Travel::class);
        $travel2 = $this->createMock(Travel::class);

        $travels = [$travel1, $travel2];

        $this->travelRepository
            ->expects($this->once())
            ->method('getAll')
            ->willReturn($travels);

        $this->indexerRepository
            ->expects($this->at(1))
            ->method('save')
            ->with($travel1);

        $this->indexerRepository
            ->expects($this->at(1))
            ->method('save')
            ->with($travel2);

        $populateIndexer = new PopulateIndexer(
            $this->travelRepository,
            $this->indexerRepository
        );

        $populateIndexer->execute();
    }
}
